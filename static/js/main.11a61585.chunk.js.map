{"version":3,"sources":["components/Trollface.png","components/Header.js","components/Memegenerator.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","src","Trollface","alt","Memegenerator","handleChange","event","target","name","value","setState","handleSubmit","preventDefault","randNum","Math","floor","random","state","allMemeImgs","length","randMeme","url","randomImg","topText","bottomText","fetch","then","response","json","memes","data","className","onSubmit","this","type","placeholder","onChange","React","Component","Footer","href","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,uC,sMCe5BC,MAZf,WACI,OACI,gCACI,yBACIC,IAAKC,IACLC,IAAI,aAER,+C,mCCmEGC,E,kDA1EX,aAAc,IAAD,8BACT,gBAyBJC,aAAe,SAACC,GAAW,IAAD,EACAA,EAAMC,OAArBC,EADe,EACfA,KAAMC,EADS,EACTA,MACb,EAAKC,SAAL,eACKF,EAAOC,KA7BH,EAiCbE,aAAe,SAACL,GACZA,EAAMM,iBACN,IAAMC,EAAUC,KAAKC,MAAMD,KAAKE,SAAW,EAAKC,MAAMC,YAAYC,QAC5DC,EAAW,EAAKH,MAAMC,YAAYL,GAASQ,IACjD,EAAKX,SAAS,CACVY,UAAWF,KApCf,EAAKH,MAAQ,CACTM,QAAS,GACTC,WAAY,GACZF,UAAW,GAEXJ,YAAa,IAPR,E,gEAWQ,IAAD,OAChBO,MAAM,qCACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAa,IACRE,EAASF,EAASG,KAAlBD,MAEDT,EAAWS,EADDf,KAAKC,MAAMD,KAAKE,SAAWa,EAAMV,SACjBE,IAChC,EAAKX,SAAS,CACVQ,YAAaW,EACbP,UAAWF,S,+BAuBvB,OACI,6BACI,0BAAMW,UAAU,YAAYC,SAAUC,KAAKtB,cACvC,2BACIuB,KAAK,OACL1B,KAAK,UACL2B,YAAY,WACZ1B,MAAOwB,KAAKhB,MAAMM,QAClBa,SAAUH,KAAK5B,aACf0B,UAAU,aAEd,2BACIG,KAAK,OACL1B,KAAK,aACL2B,YAAY,cACZ1B,MAAOwB,KAAKhB,MAAMO,WAClBY,SAAUH,KAAK5B,aACf0B,UAAU,gBAEd,wCAEJ,yBAAKA,UAAU,QACX,yBAAK9B,IAAKgC,KAAKhB,MAAMK,UAAWnB,IAAI,KACpC,wBAAI4B,UAAU,OAAOE,KAAKhB,MAAMM,SAChC,wBAAIQ,UAAU,UAAUE,KAAKhB,MAAMO,kB,GApE3Ba,IAAMC,WCQnBC,MARf,WACI,OACI,gCACI,2CAAgB,uBAAGC,KAAK,sDAAR,iBAAhB,kB,MCaGC,MAVf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCDcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.11a61585.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Trollface.be324d5b.png\";","import React from 'react';\r\nimport Trollface from \"./Trollface.png\";\r\n\r\nfunction Header() {\r\n    return(\r\n        <header>\r\n            <img \r\n                src={Trollface} \r\n                alt=\"Problem?\"\r\n            />\r\n            <p>Meme Generator</p>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nclass Memegenerator extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            topText: \"\",\r\n            bottomText: \"\",\r\n            randomImg: \"\",\r\n            // randomImg: \"http://i.imgflip.com/1bij.jpg\",\r\n            allMemeImgs: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                const {memes} = response.data;\r\n                const randNum = Math.floor(Math.random() * memes.length);\r\n                const randMeme = memes[randNum].url;\r\n                this.setState({\r\n                    allMemeImgs: memes,\r\n                    randomImg: randMeme\r\n                });\r\n            });\r\n\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        const {name, value} = event.target;\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        const randNum = Math.floor(Math.random() * this.state.allMemeImgs.length);\r\n        const randMeme = this.state.allMemeImgs[randNum].url;\r\n        this.setState({\r\n            randomImg: randMeme\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <form className=\"meme-form\" onSubmit={this.handleSubmit}>\r\n                    <input \r\n                        type=\"text\" \r\n                        name=\"topText\" \r\n                        placeholder=\"Top Text\"\r\n                        value={this.state.topText}\r\n                        onChange={this.handleChange}\r\n                        className=\"inputTop\"\r\n                    />\r\n                    <input \r\n                        type=\"text\" \r\n                        name=\"bottomText\" \r\n                        placeholder=\"Bottom Text\"\r\n                        value={this.state.bottomText}\r\n                        onChange={this.handleChange}\r\n                        className=\"inputBottom\"\r\n                    />\r\n                    <button>Gen</button>\r\n                </form> \r\n                <div className=\"meme\">\r\n                    <img src={this.state.randomImg} alt=\"\" />\r\n                    <h2 className=\"top\">{this.state.topText}</h2>\r\n                    <h2 className=\"bottom\">{this.state.bottomText}</h2>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Memegenerator;","import React from 'react';\r\n\r\nfunction Footer() {\r\n    return(\r\n        <footer>\r\n            <small>Build by <a href=\"https://github.com/Tingkai911/react-meme-generator\">Ting Kai Chua</a> using React</small>\r\n        </footer>    \r\n    );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\nimport './App.css';\nimport Header from \"./components/Header\";\nimport Memegenerator from \"./components/Memegenerator\";\nimport Footer from \"./components/Footer\";\nimport './components/style.css';\n\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <Memegenerator />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}